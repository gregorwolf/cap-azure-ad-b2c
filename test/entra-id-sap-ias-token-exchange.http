# Authenticate to Microsoft Entra ID or Azure AD B2C
# Does not work when MFA / 2FA is enabled
# @name getUserAccessToken
POST https://login.microsoftonline.com/{{$dotenv tenant}}/oauth2/v2.0/token
Content-Type: application/x-www-form-urlencoded

client_id={{$dotenv client_id}}
&client_secret={{$dotenv client_secret}}
&scope=user.read openid profile offline_access
&username={{$dotenv mail}}
&password={{$dotenv password}}
&grant_type=password
### Write response into local variables
@access_token={{getUserAccessToken.response.body.$.access_token}}
#@id_token={{getUserAccessToken.response.body.$.id_token}}
@refresh_token={{getUserAccessToken.response.body.$.refresh_token}}
###
# @name getUserAccessTokenFromRefreshToken
POST https://login.microsoftonline.com/{{$dotenv tenant}}/oauth2/v2.0/token
Content-Type: application/x-www-form-urlencoded

client_id={{$dotenv client_id}}
&client_secret={{$dotenv client_secret}}
&scope=user.read openid profile offline_access
&refresh_token={{refresh_token}}
&grant_type=refresh_token
###
@id_token={{getUserAccessTokenFromRefreshToken.response.body.$.id_token}}
@access_token={{getUserAccessTokenFromRefreshToken.response.body.$.access_token}}
### Try to get a SAML Bearer Token from SAP Identity Authentication Service (IAS)
# @name requestSAMLBearerToken
POST {{$dotenv ias_base_url}}/oauth2/token
Authorization: Basic {{$dotenv ias_client_id}}:{{$dotenv ias_client_secret}}
Content-Type: application/x-www-form-urlencoded

grant_type=urn:ietf:params:oauth:grant-type:token-exchange
&client_id={{$dotenv ias_client_id}}
&subject_token={{id_token}}
&subject_token_type=urn:ietf:params:oauth:token-type:id_token
#&subject_token={{access_token}}
#&subject_token_type=urn:ietf:params:oauth:token-type:access_token
&scope=openid email
&requested_token_type=urn:ietf:params:oauth:token-type:saml2
### Currently returns:
#{
#  "error": "invalid_client",
#  "error_description": "Invalid application type"
#}

### Get Access Token from SAP Identity Authentication Service (IAS)
# @name requestAccessTokenIAS
POST {{$dotenv ias_base_url}}/oauth2/token
Authorization: Basic {{$dotenv ias_client_id}}:{{$dotenv ias_client_secret}}
Content-Type: application/x-www-form-urlencoded

grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer
&assertion={{id_token}}
### Write response into local variables
@access_token_ias={{requestAccessTokenIAS.response.body.$.access_token}}
@id_token_ias={{requestAccessTokenIAS.response.body.$.id_token}}
### Get Access Token from SAP BTP XSUAA
# @name requestAccessTokenBTP
POST {{$dotenv ApplicationIDuri}}/oauth/token
Authorization: Basic {{$dotenv btp_clientid}}:{{$dotenv btp_clientsecret}}
Content-Type: application/x-www-form-urlencoded

assertion={{id_token_ias}}
&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer
### Write response into local variables
@access_token_btp={{requestAccessTokenBTP.response.body.$.access_token}}
###
GET {{$dotenv graph_uri}}
Authorization: Bearer {{access_token_btp}}
### Calls SAP Graph API to get User Details
### Read User Details based on OData Service
### https://github.com/gregorwolf/ZAPI_USER_NAME
GET {{$dotenv graph_uri}}/api/{{$dotenv graph_name}}/my.a4h.user/UserDetailsSet
Authorization: Bearer {{access_token_btp}}
###
GET {{$dotenv graph_uri}}/catalog
Authorization: Bearer {{access_token_btp}}
### Call OData Service of Multitenant Application 
### https://github.com/gregorwolf/mtxs-bookshop
### Read Active
GET {{$dotenv btp_mtxs_bookshop_srv}}/odata/v4/catalog/Books
Authorization: Bearer {{access_token_btp}}
### Read Drafts
GET {{$dotenv btp_mtxs_bookshop_srv}}/odata/v4/catalog/Books
  ?$filter=IsActiveEntity eq false
Authorization: Bearer {{access_token_btp}}
###
POST {{$dotenv btp_mtxs_bookshop_srv}}/odata/v4/catalog/Books
Authorization: Bearer {{access_token_btp}}
Content-Type: application/json

{
  "title": "Per Anhalter durch die Galaxis",
  "stock": 500
}
### Call OData Service of Multitenant Application 
### https://github.com/gregorwolf/mtxs-reviews
GET {{$dotenv btp_mtxs_reviews_srv}}/odata/v4/review
Authorization: Bearer {{access_token_btp}}
###
# @name getBooks
GET {{$dotenv btp_mtxs_reviews_srv}}/odata/v4/review/Books
Authorization: Bearer {{access_token_btp}}
###
@bookId={{getBooks.response.body.$.value[0].ID}}
###
PATCH {{$dotenv btp_mtxs_reviews_srv}}/odata/v4/review/Books({{bookId}})
Authorization: Bearer {{access_token_btp}}
Content-Type: application/json

{
  "stock": 500
}

### Get Access Token for Destination Service
# @name requestDestinationAccessToken
POST {{$dotenv dest_tokenendpoint}}/oauth/token
Authorization: Basic {{$dotenv dest_clientid}}:{{$dotenv dest_clientsecret}}
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
&response_type=token

### Fill Variables from Response
@destination_access_token = {{requestDestinationAccessToken.response.body.$.access_token}}

### Get Access token from Destination Service using the OAuth2SAMLBearerAssertion Destination
# According to https://api.sap.com/api/SAP_CP_CF_Connectivity_Destination/path/get_destinations__name_
### Read details of one destination
# @name requestProviderDestination
GET {{$dotenv dest_uri}}/destination-configuration/v1/destinations/mtxs-bookshop
X-user-token: {{access_token_btp}}
Authorization: Bearer {{destination_access_token}}
